#!groovy

@Library('jenkinslib') _

def gitlab = new org.devops.gitlab()
def k8s = new org.devops.kubernetes()
def jira = new org.devops.jira()

pipeline{
    agent any
    stages{
        stage("FilterData"){
            steps{
                script{
                    response = readJSON text: """${webHookData}"""
                    tools.PrintMes("Get the event type","green")
                    env.eventType = response["webhookEvent"]
                    println("Jira event type is：${eventType}")

                    switch(eventType) {
                        case "jira:issue_created":
                            env.issueName = response['issue']['key']
                            env.userName = response['user']['name']
                            env.moduleNames = response['issue']['fields']['components']
                            env.fixVersion = response['issue']['fields']['fixVersions']
                            currentBuild.description = "${eventType} - ${issueName} Trigger by ${userName} on Jira"
                            break
                        case "jira:issue_updated":
                            env.issueName = response['issue']['key']
                            env.userName = response['user']['name']
                            env.moduleNames = response['issue']['fields']['components']
                            env.fixVersion = response['issue']['fields']['fixVersions']
                            currentBuild.description = "${eventType} - ${issueName} Trigger by ${userName} on Jira"
                            break
                        case "jira:version_created":
                            env.versionName = response["version"]["name"]
                            currentBuild.description = "${eventType} - ${versionName} Trigger by Jira"
                            break
                        case "jira:version_released":
                            env.versionName = response["version"]["name"]
                            currentBuild.description = "${eventType} - ${versionName} Trigger by Jira"
                            break
                        default:
                            println(">>>>>>    unknown event    <<<<<<")
                            break
                    }
                }
            }
        }
        stage("Create issue branch or MR"){
            when {
                anyOf {
                    environment name: 'eventType', value: 'jira:issue_created'
                    environment name: 'eventType', value: 'jira:issue_updated'
                }
            }
            steps{
                script{
                    def projectIds = []
                    fixVersion = readJSON text: """${fixVersion}"""

                    def projects = readJSON text: """${moduleNames}"""
                    for (project in projects) {
                        projectName = project["name"]
                        currentBuild.description += "\n project: ${projectName}"
                        repoName = projectName.split("-")[0]
                        try {
                            projectId = gitlab.GetProjectID(repoName, projectName)
                            projectIds.add(projectId)
                        } catch(e){
                            println(e)
                        }
                    }
                    println("list the project ID：${projectIds}")

                    if (fixVersion.size() == 0){
                        for (id in projectIds) {
                            println("Create feature branch, project ID： ${id} issue： ${issueName}")
                            currentBuild.description += "\n New feature branch--> ${issueName}"
                            gitlab.CreateBranch(id,"main","${issueName}")
                        }
                    } else {
                        fixVersion = fixVersion[0]['name']
                        currentBuild.description += "\n Associate issue to release ,will generate MR \n ${issueName} --> RELEASE-${fixVersion}"

                        for (id in projectIds) {
                            println("Create branch RELEASE-${fixVersion}")
                            gitlab.CreateBranch(id,"main","RELEASE-${fixVersion}")
                            println("Generate MR ${issueName} ---> RELEASE-${fixVersion}")
                            gitlab.CreateMr(id,"${issueName}","RELEASE-${fixVersion}","${issueName}--->RELEASE-${fixVersion}")
                        }
                    }
                }
            }
        }
        stage("CreateVersionFile"){
            when {
                environment name: 'eventType', value: 'jira:version_created'
            }
            steps{
                script{
                    println("Get the file from Deployment")
                    response = k8s.GetDeployment("demo-uat","demoapp-uat-deploy")
                    response = response.content

                    println("Upload the file")
                    base64Content = response.bytes.encodeBase64().toString()
                    gitlab.CreateRepoFile(6,"demo-uat%2f${versionName}.yaml",base64Content)                                    
                }
            }
        }
        stage("Publish release version"){
            when {
                environment name: 'eventType', value: 'jira:version_released'
            }

            steps{
                script{
                    response = jira.RunJql("project%20%3D%20${projectKey}%20AND%20fixVersion%20%3D%20${versionName}%20AND%20issuetype%20%3D%20Task")
                    response = readJSON text: """${response.content}"""
                    
                    issueList = [:]
                    for(issue in response['issues']){
                        
                        /**
                            - traversal and retrieve issue
                            - define list by key for each issue
                            - e.g, issue["key"] is "DEV-9", then issueList["DEV-9"]=[]
                        */
                        issueList[issue["key"]] = []

                        //retrieve component information
                        for (component in issue["fields"]["components"]){
                            issueList[issue["key"]].add(component["name"])
                        }
                    }
                    // e.g [DEV-9:[demo-java-service]]
                    println("List the issues variable：${issueList}")

                        /**
                            - Create MR on gitlab
                            - Confirm MR if merged done then purge branch
                        */

                    for (issue in issueList.keySet()) {

                        /**
                            - issueList is [DEV-9:[demo-java-service]]
                            - issueList.keySet() is [DEV-9]
                            - issueList[issue] is [demo-java-service]
                         */

                        for (projectName in issueList[issue]) {
                            repoName = projectName.split("-")[0]
                            projectId = gitlab.GetProjectID(repoName,projectName)

                            println("The value of projectId：" + projectId)

                            // Create MR
                            try{
                                result = gitlab.CreateMr(projectId,"RELEASE-${versionName}","master","RELEASE-${versionName}--->main")
                                result = readJSON text: """${result}"""
                                mergeId = result["iid"]

                                // accept MR
                                gitlab.AcceptMr(projectId,mergeId)
                                sleep 5
                                response = gitlab.GetSingleMr(projectId,mergeId)
                                if (response == "error"){
                                    throw new Exception("error")
                                } else if(response == "merged"){
                                    gitlab.DeleteBranch(projectId,"RELEASE-${versionName}")
                                } else {
                                    throw new Exception("unknown")
                                }                                                                
                            } catch(Exception e){
                                tools.PrintMes("Pipeline got error","red")
                                println(e)
                            }
                        }
                    }
                }
            }
        }
    }
}